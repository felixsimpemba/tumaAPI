{
  "openapi": "3.0.3",
  "info": {
    "title": "Tuma API",
    "description": "OpenAPI documentation for the Tuma backend. Includes Auth (OTP + JWT) and basic health check endpoints.",
    "version": "0.1.0",
    "contact": {
      "name": "Tuma API Support"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local"
    }
  ],
  "tags": [
    { "name": "Health", "description": "Service health and status" },
    { "name": "Auth", "description": "OTP + JWT authentication" },
    { "name": "Users", "description": "User profile and trips" },
    { "name": "Drivers", "description": "Driver onboarding, status, and discovery" },
    { "name": "Trips", "description": "Trip booking and lifecycle" },
    { "name": "Payments", "description": "Trip payments (mock)" }
  ],
  "paths": {
    "/healthz": {
      "get": {
        "tags": ["Health"],
        "summary": "Health check",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Service healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ok": { "type": "boolean", "example": true },
                    "db": { "type": "string", "example": "up" },
                    "time": { "type": "string", "format": "date-time" }
                  }
                }
              }
            }
          },
          "503": { "description": "Database down or error" }
        }
      }
    },
    "/auth/request-otp": {
      "post": {
        "tags": ["Auth"],
        "summary": "Request an OTP code",
        "operationId": "requestOtp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["phone"],
                "properties": {
                  "phone": { "type": "string", "example": "+256700000000" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OTP sent (mocked in dev)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RequestOtpResponse" } } } },
          "429": { "description": "Rate limited", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "400": { "description": "Invalid input", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/auth/verify-otp": {
      "post": {
        "tags": ["Auth"],
        "summary": "Verify an OTP code and receive a temporary verification token",
        "operationId": "verifyOtp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["phone", "code"],
                "properties": {
                  "phone": { "type": "string" },
                  "code": { "type": "string", "example": "123456" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified",
            "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "data": { "type": "object", "properties": { "verificationToken": { "type": "string" } } } } } } }
          },
          "400": { "description": "Invalid or expired code", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user after successful OTP verification",
        "operationId": "register",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["verificationToken"],
                "properties": {
                  "verificationToken": { "type": "string" },
                  "name": { "type": "string" },
                  "email": { "type": "string", "format": "email" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registered successfully",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthSuccess" } } }
          },
          "400": { "description": "Invalid verification token", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login using a verification token obtained from OTP verification",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["verificationToken"],
                "properties": {
                  "verificationToken": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Logged in", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AuthSuccess" } } } },
          "400": { "description": "Invalid verification token", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout current user (requires access token)",
        "operationId": "logout",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "200": { "description": "Logged out", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user profile",
        "operationId": "getMe",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "200": {
            "description": "Current user profile",
            "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/User" } } } } }
          },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/users/update": {
      "put": {
        "tags": ["Users"],
        "summary": "Update current user profile",
        "operationId": "updateUser",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "type": "object", "properties": { "name": { "type": "string" }, "email": { "type": "string", "format": "email", "nullable": true } } }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/User" } } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "409": { "description": "Email already in use", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/users/trips": {
      "get": {
        "tags": ["Users"],
        "summary": "List current user's trips",
        "operationId": "listMyTrips",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 100 }, "required": false },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "minimum": 0 }, "required": false }
        ],
        "responses": {
          "200": { "description": "Trips list", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "data": { "type": "object", "properties": { "total": { "type": "integer" }, "limit": { "type": "integer" }, "offset": { "type": "integer" }, "items": { "type": "array", "items": { "$ref": "#/components/schemas/Trip" } } } } } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/users/account": {
      "delete": {
        "tags": ["Users"],
        "summary": "Delete (soft) current user's account",
        "operationId": "deleteAccount",
        "security": [ { "bearerAuth": [] } ],
        "responses": {
          "200": { "description": "Deleted", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/drivers/register": {
      "post": {
        "tags": ["Drivers"],
        "summary": "Register driver profile and vehicle (auth)",
        "operationId": "registerDriver",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["plateNumber"],
                "properties": {
                  "licenseDocUrl": { "type": "string", "nullable": true },
                  "vehicleType": { "type": "string", "enum": ["car","bike","van","other"], "default": "car" },
                  "plateNumber": { "type": "string" },
                  "color": { "type": "string", "nullable": true }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Driver created (pending)", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Driver" } } } } } },
          "400": { "description": "Invalid input", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "409": { "description": "Driver already exists or plate in use", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/drivers/update-status": {
      "put": {
        "tags": ["Drivers"],
        "summary": "Update driver online status and location (auth)",
        "operationId": "updateDriverStatus",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "online": { "type": "boolean" },
                  "lat": { "type": "number", "format": "double", "nullable": true },
                  "lng": { "type": "number", "format": "double", "nullable": true }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Driver" } } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden change", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/drivers/{id}": {
      "get": {
        "tags": ["Drivers"],
        "summary": "Get driver by id",
        "operationId": "getDriverById",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "integer", "format": "int64" } }
        ],
        "responses": {
          "200": { "description": "Driver", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Driver" } } } } } },
          "404": { "description": "Not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/drivers": {
      "get": {
        "tags": ["Drivers"],
        "summary": "Find nearby drivers (approved & online)",
        "operationId": "findNearbyDrivers",
        "parameters": [
          { "name": "lat", "in": "query", "required": true, "schema": { "type": "number", "format": "double" } },
          { "name": "lng", "in": "query", "required": true, "schema": { "type": "number", "format": "double" } },
          { "name": "radiusKm", "in": "query", "required": false, "schema": { "type": "number", "format": "double", "default": 5 } },
          { "name": "limit", "in": "query", "required": false, "schema": { "type": "integer", "minimum": 1, "maximum": 100, "default": 20 } }
        ],
        "responses": {
          "200": { "description": "Nearby drivers", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "type": "object", "properties": { "total": {"type":"integer"}, "items": { "type": "array", "items": { "$ref": "#/components/schemas/DriverNearby" } } } } } } } } },
          "400": { "description": "Invalid input", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    }
    ,
    "/trips/book": {
      "post": {
        "tags": ["Trips"],
        "summary": "Book a new trip",
        "operationId": "bookTrip",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["pickup", "dropoff"],
                "properties": {
                  "pickup": { "type": "object", "additionalProperties": true, "example": { "address": "Pickup St", "lat": 0.3476, "lng": 32.5825 } },
                  "dropoff": { "type": "object", "additionalProperties": true, "example": { "address": "Dropoff Rd", "lat": 0.347, "lng": 32.59 } }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Trip created", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Trip" } } } } } },
          "400": { "description": "Invalid input", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/trips/update-status": {
      "put": {
        "tags": ["Trips"],
        "summary": "Update trip status",
        "operationId": "updateTripStatus",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "required": ["tripId", "status"], "properties": { "tripId": { "type": "integer", "format": "int64" }, "status": { "type": "string", "enum": ["accepted","in-progress","completed","cancelled"] } } } } }
        },
        "responses": {
          "200": { "description": "Updated", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Trip" } } } } } },
          "400": { "description": "Invalid transition", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/trips/history": {
      "get": {
        "tags": ["Trips"],
        "summary": "List trips for current user or driver",
        "operationId": "tripHistory",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [
          { "name": "role", "in": "query", "schema": { "type": "string", "enum": ["user","driver"] }, "required": false },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "minimum": 1, "maximum": 100 }, "required": false },
          { "name": "offset", "in": "query", "schema": { "type": "integer", "minimum": 0 }, "required": false }
        ],
        "responses": {
          "200": { "description": "Trips list", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": { "type": "boolean" }, "data": { "type": "object", "properties": { "total": { "type": "integer" }, "limit": { "type": "integer" }, "offset": { "type": "integer" }, "items": { "type": "array", "items": { "$ref": "#/components/schemas/Trip" } } } } } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/trips/{id}": {
      "get": {
        "tags": ["Trips"],
        "summary": "Get trip by id",
        "operationId": "getTripById",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [ { "name": "id", "in": "path", "required": true, "schema": { "type": "integer", "format": "int64" } } ],
        "responses": {
          "200": { "description": "Trip", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Trip" } } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "403": { "description": "Forbidden", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/payments/initiate": {
      "post": {
        "tags": ["Payments"],
        "summary": "Initiate a payment for a trip (mock)",
        "operationId": "initiatePayment",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "required": ["tripId"], "properties": { "tripId": { "type": "integer", "format": "int64" }, "method": { "type": "string", "enum": ["mtn_momo","airtel_money","cash","card","other"] }, "amount": { "type": "number", "format": "double" } } } } }
        },
        "responses": {
          "201": { "description": "Payment pending", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Payment" } } } } } },
          "400": { "description": "Invalid input", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/payments/verify": {
      "post": {
        "tags": ["Payments"],
        "summary": "Verify payment outcome (mock)",
        "operationId": "verifyPayment",
        "security": [ { "bearerAuth": [] } ],
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "type": "object", "required": ["tripId"], "properties": { "tripId": { "type": "integer", "format": "int64" }, "success": { "type": "boolean", "default": true }, "providerRef": { "type": "string" } } } } }
        },
        "responses": {
          "200": { "description": "Payment updated", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Payment" } } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    },
    "/payments/{tripId}": {
      "get": {
        "tags": ["Payments"],
        "summary": "Get payment by trip id",
        "operationId": "getPaymentByTrip",
        "security": [ { "bearerAuth": [] } ],
        "parameters": [ { "name": "tripId", "in": "path", "required": true, "schema": { "type": "integer", "format": "int64" } } ],
        "responses": {
          "200": { "description": "Payment", "content": { "application/json": { "schema": { "type": "object", "properties": { "success": {"type":"boolean"}, "data": { "$ref": "#/components/schemas/Payment" } } } } } },
          "401": { "description": "Unauthorized", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
          "404": { "description": "Not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" },
          "phone": { "type": "string" },
          "email": { "type": "string", "nullable": true },
          "role": { "type": "string", "enum": ["user", "driver", "admin"] },
          "phoneVerifiedAt": { "type": "string", "format": "date-time", "nullable": true }
        }
      },
      "Tokens": {
        "type": "object",
        "properties": {
          "accessToken": { "type": "string" },
          "refreshToken": { "type": "string" }
        }
      },
      "AuthSuccess": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": true },
          "data": {
            "type": "object",
            "properties": {
              "user": { "$ref": "#/components/schemas/User" },
              "accessToken": { "type": "string" },
              "refreshToken": { "type": "string" },
              "tokenType": { "type": "string", "example": "Bearer" },
              "expiresIn": { "type": "string", "example": "15m" }
            }
          }
        }
      },
      "OkResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": true },
          "data": { "type": "object", "properties": { "ok": { "type": "boolean", "example": true } } }
        }
      },
      "RequestOtpResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": true },
          "data": {
            "type": "object",
            "properties": {
              "message": { "type": "string", "example": "OTP sent (mocked for dev)." },
              "ttl": { "type": "integer", "example": 300 },
              "exists": { "type": "boolean", "example": true }
            }
          }
        }
      },
      "Trip": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "userId": { "type": "integer", "format": "int64" },
          "driverId": { "type": "integer", "format": "int64", "nullable": true },
          "pickup": { "type": "object", "additionalProperties": true },
          "dropoff": { "type": "object", "additionalProperties": true },
          "distance": { "type": "number", "format": "double", "nullable": true },
          "fare": { "type": "number", "format": "double", "nullable": true },
          "status": { "type": "string", "enum": ["requested","accepted","in-progress","completed","cancelled"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": false },
          "error": { "type": "string" }
        }
      },
      "Vehicle": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "driverId": { "type": "integer", "format": "int64" },
          "type": { "type": "string", "enum": ["car","bike","van","other"] },
          "plateNumber": { "type": "string" },
          "color": { "type": "string", "nullable": true },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "Driver": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "userId": { "type": "integer", "format": "int64" },
          "vehicleId": { "type": "integer", "format": "int64", "nullable": true },
          "licenseDocUrl": { "type": "string", "nullable": true },
          "status": { "type": "string", "enum": ["pending","approved","rejected"] },
          "online": { "type": "boolean" },
          "lat": { "type": "number", "format": "double", "nullable": true },
          "lng": { "type": "number", "format": "double", "nullable": true },
          "vehicle": { "$ref": "#/components/schemas/Vehicle" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "DriverNearby": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "userId": { "type": "integer", "format": "int64" },
          "vehicleId": { "type": "integer", "format": "int64", "nullable": true },
          "licenseDocUrl": { "type": "string", "nullable": true },
          "status": { "type": "string", "enum": ["pending","approved","rejected"] },
          "online": { "type": "boolean" },
          "lat": { "type": "number", "format": "double", "nullable": true },
          "lng": { "type": "number", "format": "double", "nullable": true },
          "vehicle": { "$ref": "#/components/schemas/Vehicle" },
          "distanceKm": { "type": "number", "format": "double" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "tripId": { "type": "integer", "format": "int64" },
          "amount": { "type": "number", "format": "double" },
          "method": { "type": "string", "enum": ["mtn_momo","airtel_money","cash","card","other"] },
          "status": { "type": "string", "enum": ["pending","success","failed"] },
          "providerRef": { "type": "string", "nullable": true },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      }
    }
  }
}
